import theano.tensor as T
from theano import function
import sys
# Calculate the value and gradient of the objective function using theano
def theano_expression(setting, Pv_vec, capacity, latency, decayFactor, isGradient=True):
    if len(setting.mu) < 3:
        print("invalid parameter for theano expression")
        sys.exit(1)

    P_red = T.dmatrix('P_red')  # (M * (N-1))
    lamda = T.dvector('lamda')  # (M) arrival rate
    capa = T.dvector('capa')  # (N) controller capacity
    D = T.dmatrix('D')  # (N) delay among controllers and schedulers
    dF = T.dvector('dF')  # N
    beta = T.dscalar('beta')  # weight for the synchronization
    # x = T.dvector('x')  # (N) controller selection decision
    delta = T.dscalar('delta')  # Lagrange multiplier for the setup cost
    mu1 = T.dscalar('mu1')
    mu2 = T.dscalar('mu2')
    mu3 = T.dscalar('mu3')
    mu4 = T.dscalar('mu4')
    T_kcenter = T.dscalar('T_kcenter')

    P = T.zeros((lamda.shape[-1], capa.shape[-1]))  # (M*N)
    P = T.set_subtensor(P[:,:-1], P_red)
    one_vec = T.ones(lamda.shape)  # (M)
    sum_mat = T.sum(P, axis=1)  # (M) sum over column
    last_col = T.sub(one_vec, sum_mat)
    P = T.set_subtensor(P[:,-1], last_col)  # assign value to the last column of P

    theta_n = T.dot(lamda, P)  # (1*N) the workload of n controllers

    temp = T.ones(capa.shape)
    # temp = beta*T.sum(temp)*temp  # (N) synchronization cost n
    temp = beta*T.sum(temp)*T.sum(temp) * temp  # (N) synchronization cost n^2
    # temp = beta * T.log(T.sum(temp)) * temp  # (N) synchronization cost log(n)
    a = T.sub(capa, temp)  # subtract the synchronization cost
    diff = T.largest(0.00001, T.sub(a, theta_n))  # set the difference of a and theta_n to
    v_n = T.inv(diff)  # (N) average sojourn time of the nth controller
    l_n = T.dot(lamda, T.mul(P, D))  # (1*N)
    l_n = T.mul(l_n, T.inv(theta_n))  # (1*N) normalize
    T_n = l_n + v_n  # (N) average response time of the nth controller
    avg_T = T.dot(theta_n, T_n) * T.inv(T.sum(theta_n))  # average response time of all controller
    obj1 = avg_T

    # U_n = T.inv(a) * theta_n  # (N) the utilisation of the nth controller
    # U = T.sum(U_n) * T.inv(T.sum(x))  # average utilisation
    U = T.sum(lamda) * T.inv(T.sum(capa))
    obj2 = - U

    remainCpc_n = T.mul(dF, a) - theta_n  # (N) remaining capacity of the nth controller
    const1 = mu1 * T.sum(T.smallest(0, remainCpc_n))

    const2 = mu2 * T.sum(T.smallest(0, last_col))  # probability sum constraint

    const3 = mu3 * T.sum(T.smallest(0, P))  # probability larger than 0 constraint

    const4 = mu4 * T.smallest(0, T_kcenter - avg_T)

    obj = delta * obj2 - const1 - const2 - const3 - const4  # Minimising (-util) while respTime is a constraint
    # obj = delta * obj1 / (-obj2) - const1 - const2 - const3  # Minimising the respTime/util
    # obj = delta * obj1 * T.dot(x, a) - const1 - const2 - const3  # Minimising the results

    if isGradient:
        g = T.grad(obj, P_red)
        gradient = function(inputs=[P_red, lamda, capa, D, dF, delta, beta, mu1, mu2, mu3, mu4, T_kcenter], outputs=[g], on_unused_input='warn')
        return gradient(Pv_vec, setting.arrivalRate, capacity, latency, decayFactor, setting.dlt, setting.beta, setting.mu[0], setting.mu[1], setting.mu[2], setting.mu[3], setting.t_thresh)
    else:
        cost = function(inputs=[P_red, lamda, capa, D, dF, delta, beta, mu1, mu2, mu3, mu4, T_kcenter], outputs=[obj], on_unused_input='warn')
        # time = function(inputs=[P_red, lamda, capa, D, dF, delta, beta], outputs=[obj1], on_unused_input='warn')
        return cost(Pv_vec, setting.arrivalRate, capacity, latency, decayFactor, setting.dlt, setting.beta, setting.mu[0], setting.mu[1], setting.mu[2], setting.mu[3], setting.t_thresh)
            # , time(Pv_vec, setting.arrivalRate, capacity, latency, decayFactor, setting.dlt, setting.beta)

"""
def main():
    
    latency_matrix = [[0, 14.328918158077553, 7.443340195182014, 2.984315854712845, 15.040359808115552, 17.110031738492847, 11.472070000479619, 
    13.390227820225805, 26.4875980271863, 24.845144413588603, 7.527408333387601, 14.847719669626994, 9.3795439407675, 10.205598641310111, 4.755967249464939, 5.042321418992566, 20.485512076794997, 8.425639671812142, 10.828191953629508, 23.284379688103083, 16.661276700260885], [14.328918158077554, 0, 6.885577962895541, 11.34460230336471, 6.425137965233869, 8.494809895611166, 2.856848157597935, 4.775005977344121, 9.143055270596594, 20.41497469013116, 23.022434636541153, 10.41754994616955, 4.949374217310055, 24.534516799387664, 19.084885407542494, 19.37123957707012, 16.055342353337554, 22.124203298116612, 19.721651016299248, 18.85420996464564, 12.231106976803442], [7.443340195182014, 6.88557796289554, 0, 4.459024340469169, 7.597019612933539, 9.666691543310835, 4.028729805297605, 5.946887625043791, 19.044257832004288, 17.40180421840659, 14.970748528569615, 7.404379474444981, 1.9362037455854857, 17.648938836492125, 12.199307444646953, 12.48566161417458, 13.042171881612983, 15.868979866994156, 16.708480544574677, 15.84103949292107, 9.217936505078871], [2.984315854712845, 11.34460230336471, 4.459024340469169, 0, 12.056043953402707, 14.125715883780003, 8.487754145766774, 10.40591196551296, 23.503282172473458, 21.86082855887576, 10.511724188100446, 11.86340381491415, 6.395228086054654, 13.189914496022954, 7.740283104177784, 8.026637273705411, 17.501196222082154, 11.409955526524987, 13.812507808342353, 20.30006383339024, 13.676960845548042], [15.040359808115554, 6.425137965233869, 7.59701961293354, 12.056043953402709, 0, 2.069671930377296, 3.568289807635934, 1.6501319878897476, 2.7179173053627252, 4.360370918960424, 22.567768141503155, 11.128991596207548, 5.660815867348054, 25.24595844942566, 19.79632705758049, 20.082681227108118, 8.72000325575403, 22.83564494815461, 20.433092666337245, 19.565651614683638, 12.94254862684144], [17.11003173849285, 8.494809895611166, 9.666691543310835, 14.125715883780003, 2.069671930377296, 0, 5.63796173801323, 3.7198039182670435, 0.648245374985429, 2.2906989885831273, 24.893008422916342, 12.288123732544737, 7.730487797725349, 27.315630379802958, 21.865998987957788, 22.152353157485415, 6.650331325376734, 23.9947770844918, 21.592224802674433, 20.724783751020826, 14.101680763178628], [11.472070000479619, 2.856848157597935, 4.028729805297605, 8.487754145766774, 3.568289807635934, 5.63796173801323, 0, 1.9181578197461864, 6.2862071129986585, 17.558126532533223, 20.165586478943222, 7.560701788571615, 2.0925260597121196, 21.677668641789726, 16.228037249944556, 16.514391419472183, 13.198494195739617, 19.26735514051868, 16.864802858701314, 15.997361807047707, 9.374258819205506], [13.390227820225805, 4.775005977344121, 5.946887625043791, 10.40591196551296, 1.6501319878897476, 3.7198039182670435, 1.9181578197461864, 0, 4.368049293252472, 6.010502906850171, 22.083744298689407, 9.478859608317801, 4.0106838794583055, 23.595826461535914, 18.146195069690744, 18.43254923921837, 15.116652015485805, 21.185512960264866, 18.7829606784475, 17.91551962679389, 11.292416638951693], [26.48759802718631, 9.143055270596594, 19.04425783200429, 23.50328217247346, 2.7179173053627252, 0.648245374985429, 6.286207112998659, 4.368049293252473, 0, 1.6424536135976984, 24.244763047930913, 11.639878357559308, 17.108054086418804, 36.69319666849642, 31.243565276651246, 26.72984996232595, 6.002085950391305, 23.346531709506372, 20.943979427689005, 20.076538376035398, 13.4534353881932], [24.845144413588606, 20.41497469013116, 17.40180421840659, 21.86082855887576, 4.360370918960424, 2.2906989885831273, 17.558126532533226, 6.010502906850172, 1.6424536135976984, 0, 22.60230943433321, 9.99742474396161, 15.465600472821105, 35.05074305489872, 29.601111663053544, 25.087396348728248, 4.359632336793607, 21.70407809590867, 19.301525814091306, 18.4340847624377, 11.8109817745955], [7.527408333387601, 23.022434636541156, 14.970748528569615, 10.511724188100446, 23.733876286579157, 24.893008422916342, 20.165586478943222, 22.08374429868941, 24.244763047930913, 22.602309434333215, 0, 12.604884690371605, 18.0730604192311, 8.221072475767834, 2.771441083922662, 2.4850869143950356, 18.24267709753961, 0.8982313384245413, 3.300783620241907, 4.168224671895514, 10.791327659737714], [14.847719669626995, 10.41754994616955, 7.404379474444981, 11.86340381491415, 11.128991596207548, 
    12.288123732544737, 7.560701788571615, 9.478859608317801, 11.639878357559308, 9.99742474396161, 12.604884690371604, 0, 5.468175728859495, 25.053318310937104, 19.603686919091935, 15.089971604766639, 5.637792407168003, 11.706653351947063, 9.304101070129697, 8.43666001847609, 1.8135570306338906], [9.3795439407675, 4.949374217310055, 1.9362037455854857, 6.395228086054654, 5.660815867348053, 7.730487797725349, 2.0925260597121196, 4.0106838794583055, 17.108054086418804, 15.465600472821105, 18.0730604192311, 5.468175728859495, 0, 19.58514258207761, 14.135511190232439, 14.421865359760066, 11.105968136027498, 17.17482908080656, 14.772276798989193, 13.904835747335586, 7.281732759493385], [10.205598641310111, 24.534516799387664, 17.648938836492125, 13.189914496022956, 25.24595844942566, 27.315630379802958, 21.67766864178973, 23.595826461535914, 36.69319666849641, 35.05074305489872, 8.221072475767834, 25.053318310937104, 19.58514258207761, 0, 5.449631391845171, 5.7359855613727975, 
    30.691110718105108, 9.119303814192374, 11.52185609600974, 12.389297147663347, 26.866875341570996], [4.755967249464939, 19.084885407542494, 12.199307444646953, 7.740283104177784, 19.796327057580495, 21.86599898795779, 16.22803724994456, 18.146195069690748, 31.243565276651243, 29.601111663053544, 2.771441083922662, 19.603686919091935, 14.135511190232439, 5.449631391845171, 0, 0.28635416952762655, 25.241479326259938, 3.6696724223472033, 6.072224704164569, 6.939665755818175, 21.417243949725826], [5.042321418992566, 19.37123957707012, 12.48566161417458, 8.026637273705411, 20.08268122710812, 22.152353157485418, 16.514391419472187, 18.432549239218375, 26.729849962325947, 25.087396348728248, 2.4850869143950356, 15.089971604766639, 14.421865359760066, 5.7359855613727975, 0.28635416952762655, 0, 20.727764011934642, 3.383318252819577, 5.785870534636943, 6.653311586290549, 13.276414574132748], [20.485512076794997, 16.05534235333755, 13.042171881612983, 17.50119622208215, 8.72000325575403, 6.650331325376734, 13.198494195739617, 15.116652015485803, 6.002085950391305, 4.359632336793607, 18.24267709753961, 5.637792407168003, 11.105968136027498, 30.691110718105104, 25.241479326259935, 20.727764011934646, 0, 17.344445759115068, 
    14.9418934772977, 14.074452425644093, 7.451349437801893], [8.425639671812142, 22.124203298116612, 15.868979866994156, 11.409955526524987, 22.835644948154613, 23.994777084491798, 19.267355140518678, 21.185512960264866, 23.34653170950637, 21.70407809590867, 0.8982313384245413, 11.706653351947063, 17.174829080806557, 9.119303814192374, 3.6696724223472033, 3.383318252819577, 17.344445759115064, 0, 2.402552281817366, 3.269993333470972, 9.893096321313172], [10.82819195362951, 19.721651016299248, 16.708480544574677, 13.812507808342355, 20.43309266633725, 21.592224802674433, 16.864802858701314, 18.782960678447502, 20.943979427689005, 19.301525814091306, 3.300783620241907, 9.304101070129697, 14.772276798989193, 11.52185609600974, 6.07222470416457, 5.785870534636943, 14.9418934772977, 2.402552281817366, 0, 0.8674410516536064, 7.490544039495806], [11.695633005283115, 18.85420996464564, 15.841039492921071, 20.30006383339024, 19.565651614683638, 20.724783751020826, 15.997361807047705, 17.91551962679389, 20.076538376035398, 18.4340847624377, 4.168224671895514, 8.43666001847609, 13.904835747335586, 12.389297147663346, 6.939665755818176, 6.653311586290549, 14.074452425644093, 3.269993333470972, 0.8674410516536064, 0, 6.623102987842199], [16.661276700260885, 12.231106976803439, 9.217936505078871, 13.67696084554804, 12.942548626841438, 14.101680763178628, 9.374258819205505, 11.292416638951691, 13.4534353881932, 11.8109817745955, 10.791327659737712, 1.8135570306338906, 7.281732759493385, 26.866875341570992, 21.417243949725822, 13.276414574132748, 7.451349437801893, 9.893096321313172, 7.490544039495806, 6.623102987842199, 0]]
    
    setting = Setting(latency_matrix)
    print(theano_expression(setting, [[]], setting.capacity, setting.latency, setting.decayFactor, False))

if __name__ == '__main__' :
    main()
"""